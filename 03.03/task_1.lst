     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020)
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1     ;, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1> 
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:
   155                              <1>       mov eax,edi
   156                              <1>       xor edx,edx
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1> 
   173                              <1> 
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2:
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi
   308                              <1> %%m_p:
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
     2                                  
     3                                  ; 1.	Напишите программу на ассемблере, которая соответствует приведенному коду на С.
     4                                  ; static int  x, y=25, t=19;
     5                                  ; static int *xp;
     6                                  ; xp =&t;
     7                                  ;      x = *xp;
     8                                  ;          *xp = y;
     9                                  ; printf(“%d   %d\n”, x, *xp);
    10                                  
    11                                  section .data
    12 00000000 19000000                    y dd 25
    13 00000004 13000000                    t dd 19
    14                                  
    15                                  section .bss
    16 00000000 ????????                    x resd 1
    17 00000004 ????????                    xp resd 1
    18                                  
    19                                  section .text
    20                                      global _start
    21                                  
    22                                  _start:
    23 00000000 C705[04000000]-             mov dword [xp], t
    23 00000006 [04000000]         
    24                                  
    25 0000000A A1[04000000]                mov eax, [t]
    26 0000000F A3[00000000]                mov [x], eax
    27                                  
    28 00000014 A1[00000000]                mov eax, [y]
    29 00000019 A3[04000000]                mov [t], eax
    30                                  
    31                                      SIGNINT dword [t]
   179 0000001E 60                  <1> pusha
   180 0000001F 9C                  <1> pushf
   181 00000020 FF35[04000000]      <1> push dword %1
   182 00000026 58                  <1> pop eax
   183 00000027 83F800              <1>  cmp eax,0
   184 0000002A 7D25                <1>  jge %%m5
   185                              <1>  PUTCHAR '-'
    68 0000002C 60                  <2>  pusha
    69 0000002D 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71 0000002E B02D                <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75                              <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87                              <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 00000030 83EC02              <2>  sub esp, 2
    94 00000033 89E7                <2>  mov edi, esp
    95 00000035 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 00000037 52                  <4>  push edx
    16 00000038 51                  <4>  push ecx
    17 00000039 53                  <4>  push ebx
    18 0000003A 6A04                <4>  push %1
    19 0000003C 6A01                <4>  push %2
    20 0000003E 57                  <4>  push %3
    21 0000003F 6A01                <4>  push %4
    22 00000041 5A                  <4>  pop edx
    23 00000042 59                  <4>  pop ecx
    24 00000043 5B                  <4>  pop ebx
    25 00000044 58                  <4>  pop eax
    26 00000045 CD80                <4>  int 0x80
    27 00000047 5B                  <4>  pop ebx
    28 00000048 59                  <4>  pop ecx
    29 00000049 5A                  <4>  pop edx
    97 0000004A 83C402              <2>  add esp, 2
    98 0000004D 9D                  <2>  popf
    99 0000004E 61                  <2>  popa
   186 0000004F F7D8                <1>  neg eax
   187                              <1> %%m5:
   188                              <1>  UNSINT eax
   129 00000051 60                  <2> pusha
   130 00000052 9C                  <2> pushf
   131 00000053 50                  <2> push dword %1
   132 00000054 58                  <2> pop eax
   133 00000055 89C7                <2> mov edi,eax
   134 00000057 BE0A000000          <2> mov esi,10
   135 0000005C 31DB                <2>  xor ebx,ebx
   136                              <2> %%m1:
   137 0000005E 31D2                <2>  xor edx,edx
   138 00000060 F7F6                <2>  div esi
   139 00000062 43                  <2>  inc ebx
   140 00000063 83F800              <2>  cmp eax,0
   141 00000066 75F6                <2>  jne %%m1
   142                              <2> 
   143 00000068 B801000000          <2>  mov eax,1
   144 0000006D 89D9                <2>  mov ecx,ebx
   145 0000006F 49                  <2>  dec ecx
   146                              <2> 
   147 00000070 83F900              <2>  cmp ecx,0
   148 00000073 7441                <2>  je %%m4
   149 00000075 F7E6                <2> %%m2: mul esi
   150 00000077 E2FC                <2>  loop %%m2
   151                              <2> 
   152 00000079 89C3                <2>  mov ebx,eax
   153                              <2> 
   154                              <2> %%m3:
   155 0000007B 89F8                <2>  mov eax,edi
   156 0000007D 31D2                <2>  xor edx,edx
   157 0000007F F7F3                <2>  div ebx
   158 00000081 0430                <2>  add al,'0'
   159                              <2>  PUTCHAR al
    68 00000083 60                  <3>  pusha
    69 00000084 9C                  <3>  pushf
    70                              <3> %ifstr %1
    71                              <3>  mov al, %1
    72                              <3> %elifnum %1
    73                              <3>  mov al, %1
    74                              <3> %elifidni %1,al
    75 00000085 90                  <3>  nop
    76                              <3> %elifidni %1,ah
    77                              <3>  mov al, ah
    78                              <3> %elifidni %1,bl
    79                              <3>  mov al, bl
    80                              <3> %elifidni %1,bh
    81                              <3>  mov al, bh
    82                              <3> %elifidni %1,cl
    83                              <3>  mov al, cl
    84                              <3> %elifidni %1,ch
    85                              <3>  mov al, ch
    86                              <3> %elifidni %1,dl
    87                              <3>  mov al, dl
    88                              <3> %elifidni %1,dh
    89                              <3>  mov al, dh
    90                              <3> %else
    91                              <3>  mov al, %1
    92                              <3> %endif
    93 00000086 83EC02              <3>  sub esp, 2
    94 00000089 89E7                <3>  mov edi, esp
    95 0000008B 8807                <3>  mov [edi], al
    96                              <3>  _syscall_write 1, edi, 1
    51                              <4>  _syscall_3 4,%1,%2,%3
    15 0000008D 52                  <5>  push edx
    16 0000008E 51                  <5>  push ecx
    17 0000008F 53                  <5>  push ebx
    18 00000090 6A04                <5>  push %1
    19 00000092 6A01                <5>  push %2
    20 00000094 57                  <5>  push %3
    21 00000095 6A01                <5>  push %4
    22 00000097 5A                  <5>  pop edx
    23 00000098 59                  <5>  pop ecx
    24 00000099 5B                  <5>  pop ebx
    25 0000009A 58                  <5>  pop eax
    26 0000009B CD80                <5>  int 0x80
    27 0000009D 5B                  <5>  pop ebx
    28 0000009E 59                  <5>  pop ecx
    29 0000009F 5A                  <5>  pop edx
    97 000000A0 83C402              <3>  add esp, 2
    98 000000A3 9D                  <3>  popf
    99 000000A4 61                  <3>  popa
   160 000000A5 89D7                <2>  mov edi,edx
   161 000000A7 31D2                <2>  xor edx,edx
   162 000000A9 89D8                <2>  mov eax,ebx
   163 000000AB F7F6                <2>  div esi
   164 000000AD 83F801              <2>  cmp eax,1
   165 000000B0 7404                <2>  je %%m4
   166 000000B2 89C3                <2>  mov ebx,eax
   167 000000B4 EBC5                <2>  jmp %%m3
   168                              <2>  %%m4:
   169 000000B6 89FA                <2>  mov edx,edi
   170 000000B8 80C230              <2>  add dl,'0'
   171                              <2>  PUTCHAR dl
    68 000000BB 60                  <3>  pusha
    69 000000BC 9C                  <3>  pushf
    70                              <3> %ifstr %1
    71                              <3>  mov al, %1
    72                              <3> %elifnum %1
    73                              <3>  mov al, %1
    74                              <3> %elifidni %1,al
    75                              <3>  nop
    76                              <3> %elifidni %1,ah
    77                              <3>  mov al, ah
    78                              <3> %elifidni %1,bl
    79                              <3>  mov al, bl
    80                              <3> %elifidni %1,bh
    81                              <3>  mov al, bh
    82                              <3> %elifidni %1,cl
    83                              <3>  mov al, cl
    84                              <3> %elifidni %1,ch
    85                              <3>  mov al, ch
    86                              <3> %elifidni %1,dl
    87 000000BD 88D0                <3>  mov al, dl
    88                              <3> %elifidni %1,dh
    89                              <3>  mov al, dh
    90                              <3> %else
    91                              <3>  mov al, %1
    92                              <3> %endif
    93 000000BF 83EC02              <3>  sub esp, 2
    94 000000C2 89E7                <3>  mov edi, esp
    95 000000C4 8807                <3>  mov [edi], al
    96                              <3>  _syscall_write 1, edi, 1
    51                              <4>  _syscall_3 4,%1,%2,%3
    15 000000C6 52                  <5>  push edx
    16 000000C7 51                  <5>  push ecx
    17 000000C8 53                  <5>  push ebx
    18 000000C9 6A04                <5>  push %1
    19 000000CB 6A01                <5>  push %2
    20 000000CD 57                  <5>  push %3
    21 000000CE 6A01                <5>  push %4
    22 000000D0 5A                  <5>  pop edx
    23 000000D1 59                  <5>  pop ecx
    24 000000D2 5B                  <5>  pop ebx
    25 000000D3 58                  <5>  pop eax
    26 000000D4 CD80                <5>  int 0x80
    27 000000D6 5B                  <5>  pop ebx
    28 000000D7 59                  <5>  pop ecx
    29 000000D8 5A                  <5>  pop edx
    97 000000D9 83C402              <3>  add esp, 2
    98 000000DC 9D                  <3>  popf
    99 000000DD 61                  <3>  popa
   172                              <2> 
   173                              <2> 
   174 000000DE 9D                  <2> popf
   175 000000DF 61                  <2> popa
   189 000000E0 9D                  <1> popf
   190 000000E1 61                  <1> popa
    32                                      PRINT '   '
    56 000000E2 60                  <1>  pusha
    57 000000E3 9C                  <1>  pushf
    58 000000E4 EB03                <1>  jmp %%astr
    59 000000E6 202020              <1> %%str db %1
    60                              <1> %%strln equ $-%%str
    61                              <1> %%astr: _syscall_write 1, %%str, %%strln
    61                              <2> ..@15.astr: 
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 000000E9 52                  <3>  push edx
    16 000000EA 51                  <3>  push ecx
    17 000000EB 53                  <3>  push ebx
    18 000000EC 6A04                <3>  push %1
    19 000000EE 6A01                <3>  push %2
    20 000000F0 68[E6000000]        <3>  push %3
    21 000000F5 6A03                <3>  push %4
    22 000000F7 5A                  <3>  pop edx
    23 000000F8 59                  <3>  pop ecx
    24 000000F9 5B                  <3>  pop ebx
    25 000000FA 58                  <3>  pop eax
    26 000000FB CD80                <3>  int 0x80
    27 000000FD 5B                  <3>  pop ebx
    28 000000FE 59                  <3>  pop ecx
    29 000000FF 5A                  <3>  pop edx
    62 00000100 9D                  <1>  popf
    63 00000101 61                  <1>  popa
    33                                      SIGNINT dword [x]
   179 00000102 60                  <1> pusha
   180 00000103 9C                  <1> pushf
   181 00000104 FF35[00000000]      <1> push dword %1
   182 0000010A 58                  <1> pop eax
   183 0000010B 83F800              <1>  cmp eax,0
   184 0000010E 7D25                <1>  jge %%m5
   185                              <1>  PUTCHAR '-'
    68 00000110 60                  <2>  pusha
    69 00000111 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71 00000112 B02D                <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75                              <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87                              <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 00000114 83EC02              <2>  sub esp, 2
    94 00000117 89E7                <2>  mov edi, esp
    95 00000119 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 0000011B 52                  <4>  push edx
    16 0000011C 51                  <4>  push ecx
    17 0000011D 53                  <4>  push ebx
    18 0000011E 6A04                <4>  push %1
    19 00000120 6A01                <4>  push %2
    20 00000122 57                  <4>  push %3
    21 00000123 6A01                <4>  push %4
    22 00000125 5A                  <4>  pop edx
    23 00000126 59                  <4>  pop ecx
    24 00000127 5B                  <4>  pop ebx
    25 00000128 58                  <4>  pop eax
    26 00000129 CD80                <4>  int 0x80
    27 0000012B 5B                  <4>  pop ebx
    28 0000012C 59                  <4>  pop ecx
    29 0000012D 5A                  <4>  pop edx
    97 0000012E 83C402              <2>  add esp, 2
    98 00000131 9D                  <2>  popf
    99 00000132 61                  <2>  popa
   186 00000133 F7D8                <1>  neg eax
   187                              <1> %%m5:
   188                              <1>  UNSINT eax
   129 00000135 60                  <2> pusha
   130 00000136 9C                  <2> pushf
   131 00000137 50                  <2> push dword %1
   132 00000138 58                  <2> pop eax
   133 00000139 89C7                <2> mov edi,eax
   134 0000013B BE0A000000          <2> mov esi,10
   135 00000140 31DB                <2>  xor ebx,ebx
   136                              <2> %%m1:
   137 00000142 31D2                <2>  xor edx,edx
   138 00000144 F7F6                <2>  div esi
   139 00000146 43                  <2>  inc ebx
   140 00000147 83F800              <2>  cmp eax,0
   141 0000014A 75F6                <2>  jne %%m1
   142                              <2> 
   143 0000014C B801000000          <2>  mov eax,1
   144 00000151 89D9                <2>  mov ecx,ebx
   145 00000153 49                  <2>  dec ecx
   146                              <2> 
   147 00000154 83F900              <2>  cmp ecx,0
   148 00000157 7441                <2>  je %%m4
   149 00000159 F7E6                <2> %%m2: mul esi
   150 0000015B E2FC                <2>  loop %%m2
   151                              <2> 
   152 0000015D 89C3                <2>  mov ebx,eax
   153                              <2> 
   154                              <2> %%m3:
   155 0000015F 89F8                <2>  mov eax,edi
   156 00000161 31D2                <2>  xor edx,edx
   157 00000163 F7F3                <2>  div ebx
   158 00000165 0430                <2>  add al,'0'
   159                              <2>  PUTCHAR al
    68 00000167 60                  <3>  pusha
    69 00000168 9C                  <3>  pushf
    70                              <3> %ifstr %1
    71                              <3>  mov al, %1
    72                              <3> %elifnum %1
    73                              <3>  mov al, %1
    74                              <3> %elifidni %1,al
    75 00000169 90                  <3>  nop
    76                              <3> %elifidni %1,ah
    77                              <3>  mov al, ah
    78                              <3> %elifidni %1,bl
    79                              <3>  mov al, bl
    80                              <3> %elifidni %1,bh
    81                              <3>  mov al, bh
    82                              <3> %elifidni %1,cl
    83                              <3>  mov al, cl
    84                              <3> %elifidni %1,ch
    85                              <3>  mov al, ch
    86                              <3> %elifidni %1,dl
    87                              <3>  mov al, dl
    88                              <3> %elifidni %1,dh
    89                              <3>  mov al, dh
    90                              <3> %else
    91                              <3>  mov al, %1
    92                              <3> %endif
    93 0000016A 83EC02              <3>  sub esp, 2
    94 0000016D 89E7                <3>  mov edi, esp
    95 0000016F 8807                <3>  mov [edi], al
    96                              <3>  _syscall_write 1, edi, 1
    51                              <4>  _syscall_3 4,%1,%2,%3
    15 00000171 52                  <5>  push edx
    16 00000172 51                  <5>  push ecx
    17 00000173 53                  <5>  push ebx
    18 00000174 6A04                <5>  push %1
    19 00000176 6A01                <5>  push %2
    20 00000178 57                  <5>  push %3
    21 00000179 6A01                <5>  push %4
    22 0000017B 5A                  <5>  pop edx
    23 0000017C 59                  <5>  pop ecx
    24 0000017D 5B                  <5>  pop ebx
    25 0000017E 58                  <5>  pop eax
    26 0000017F CD80                <5>  int 0x80
    27 00000181 5B                  <5>  pop ebx
    28 00000182 59                  <5>  pop ecx
    29 00000183 5A                  <5>  pop edx
    97 00000184 83C402              <3>  add esp, 2
    98 00000187 9D                  <3>  popf
    99 00000188 61                  <3>  popa
   160 00000189 89D7                <2>  mov edi,edx
   161 0000018B 31D2                <2>  xor edx,edx
   162 0000018D 89D8                <2>  mov eax,ebx
   163 0000018F F7F6                <2>  div esi
   164 00000191 83F801              <2>  cmp eax,1
   165 00000194 7404                <2>  je %%m4
   166 00000196 89C3                <2>  mov ebx,eax
   167 00000198 EBC5                <2>  jmp %%m3
   168                              <2>  %%m4:
   169 0000019A 89FA                <2>  mov edx,edi
   170 0000019C 80C230              <2>  add dl,'0'
   171                              <2>  PUTCHAR dl
    68 0000019F 60                  <3>  pusha
    69 000001A0 9C                  <3>  pushf
    70                              <3> %ifstr %1
    71                              <3>  mov al, %1
    72                              <3> %elifnum %1
    73                              <3>  mov al, %1
    74                              <3> %elifidni %1,al
    75                              <3>  nop
    76                              <3> %elifidni %1,ah
    77                              <3>  mov al, ah
    78                              <3> %elifidni %1,bl
    79                              <3>  mov al, bl
    80                              <3> %elifidni %1,bh
    81                              <3>  mov al, bh
    82                              <3> %elifidni %1,cl
    83                              <3>  mov al, cl
    84                              <3> %elifidni %1,ch
    85                              <3>  mov al, ch
    86                              <3> %elifidni %1,dl
    87 000001A1 88D0                <3>  mov al, dl
    88                              <3> %elifidni %1,dh
    89                              <3>  mov al, dh
    90                              <3> %else
    91                              <3>  mov al, %1
    92                              <3> %endif
    93 000001A3 83EC02              <3>  sub esp, 2
    94 000001A6 89E7                <3>  mov edi, esp
    95 000001A8 8807                <3>  mov [edi], al
    96                              <3>  _syscall_write 1, edi, 1
    51                              <4>  _syscall_3 4,%1,%2,%3
    15 000001AA 52                  <5>  push edx
    16 000001AB 51                  <5>  push ecx
    17 000001AC 53                  <5>  push ebx
    18 000001AD 6A04                <5>  push %1
    19 000001AF 6A01                <5>  push %2
    20 000001B1 57                  <5>  push %3
    21 000001B2 6A01                <5>  push %4
    22 000001B4 5A                  <5>  pop edx
    23 000001B5 59                  <5>  pop ecx
    24 000001B6 5B                  <5>  pop ebx
    25 000001B7 58                  <5>  pop eax
    26 000001B8 CD80                <5>  int 0x80
    27 000001BA 5B                  <5>  pop ebx
    28 000001BB 59                  <5>  pop ecx
    29 000001BC 5A                  <5>  pop edx
    97 000001BD 83C402              <3>  add esp, 2
    98 000001C0 9D                  <3>  popf
    99 000001C1 61                  <3>  popa
   172                              <2> 
   173                              <2> 
   174 000001C2 9D                  <2> popf
   175 000001C3 61                  <2> popa
   189 000001C4 9D                  <1> popf
   190 000001C5 61                  <1> popa
    34                                      PUTCHAR 10
    68 000001C6 60                  <1>  pusha
    69 000001C7 9C                  <1>  pushf
    70                              <1> %ifstr %1
    71                              <1>  mov al, %1
    72                              <1> %elifnum %1
    73 000001C8 B00A                <1>  mov al, %1
    74                              <1> %elifidni %1,al
    75                              <1>  nop
    76                              <1> %elifidni %1,ah
    77                              <1>  mov al, ah
    78                              <1> %elifidni %1,bl
    79                              <1>  mov al, bl
    80                              <1> %elifidni %1,bh
    81                              <1>  mov al, bh
    82                              <1> %elifidni %1,cl
    83                              <1>  mov al, cl
    84                              <1> %elifidni %1,ch
    85                              <1>  mov al, ch
    86                              <1> %elifidni %1,dl
    87                              <1>  mov al, dl
    88                              <1> %elifidni %1,dh
    89                              <1>  mov al, dh
    90                              <1> %else
    91                              <1>  mov al, %1
    92                              <1> %endif
    93 000001CA 83EC02              <1>  sub esp, 2
    94 000001CD 89E7                <1>  mov edi, esp
    95 000001CF 8807                <1>  mov [edi], al
    96                              <1>  _syscall_write 1, edi, 1
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 000001D1 52                  <3>  push edx
    16 000001D2 51                  <3>  push ecx
    17 000001D3 53                  <3>  push ebx
    18 000001D4 6A04                <3>  push %1
    19 000001D6 6A01                <3>  push %2
    20 000001D8 57                  <3>  push %3
    21 000001D9 6A01                <3>  push %4
    22 000001DB 5A                  <3>  pop edx
    23 000001DC 59                  <3>  pop ecx
    24 000001DD 5B                  <3>  pop ebx
    25 000001DE 58                  <3>  pop eax
    26 000001DF CD80                <3>  int 0x80
    27 000001E1 5B                  <3>  pop ebx
    28 000001E2 59                  <3>  pop ecx
    29 000001E3 5A                  <3>  pop edx
    97 000001E4 83C402              <1>  add esp, 2
    98 000001E7 9D                  <1>  popf
    99 000001E8 61                  <1>  popa
    35                                  
    36                                      FINISH
   125                              <1>  _syscall_exit %1
    34 000001E9 BB00000000          <2>  mov ebx, %1
    35 000001EE B801000000          <2>  mov eax, 1
    36 000001F3 CD80                <2>  int 0x80
