     1                                  %include "st_io.inc"
     1                              <1> ;; File stud_io.inc for Linux O.S.
     2                              <1> ;; Copyright (c) Andrey Vikt. Stolyarov, 2009.
     3                              <1> ;; I, the author, hereby grant everyone the right to use this
     4                              <1> ;; file for any purpose, in any manner, in it's original or
     5                              <1> ;; modified form, provided that any modified versions are
     6                              <1> ;; clearly marked as such.
     7                              <1> ;; file changed, macros added (by Divari I.N.,
     8                              <1> ;; Department of computer science, MIPT, 2019-2020)
     9                              <1> 
    10                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    11                              <1> ;; system dependend part
    12                              <1> 
    13                              <1> ; generic 3-param syscall
    14                              <1> %macro _syscall_3 4
    15                              <1> 	push edx
    16                              <1> 	push ecx
    17                              <1> 	push ebx ; it is senseless to save eax as it holds the return
    18                              <1> 	push %1
    19                              <1> 	push %2
    20                              <1> 	push %3
    21                              <1> 	push %4
    22                              <1> 	pop edx
    23                              <1> 	pop ecx
    24                              <1> 	pop ebx
    25                              <1> 	pop eax
    26                              <1> 	int 0x80
    27                              <1> 	pop ebx
    28                              <1> 	pop ecx
    29                              <1> 	pop edx
    30                              <1> %endmacro
    31                              <1> 
    32                              <1> ; syscall_exit is the only syscall we use that has 1 parameter
    33                              <1> %macro _syscall_exit 1
    34                              <1> 	mov ebx, %1	; exit code
    35                              <1> 	mov eax, 1	; 1 = sys_exit
    36                              <1> 	int 0x80
    37                              <1> %endmacro
    38                              <1> 
    39                              <1> ;; system dependent part ends here
    40                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    41                              <1> 
    42                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    43                              <1> ; output: eax: read bytes
    44                              <1> %macro _syscall_read 3
    45                              <1> 	_syscall_3 3,%1,%2,%3
    46                              <1> %endmacro
    47                              <1> 
    48                              <1> ; %1: descriptor   %2: buffer addr   %3: buffer length
    49                              <1> ; output: eax: written bytes
    50                              <1> %macro _syscall_write 3
    51                              <1> 	_syscall_3 4,%1,%2,%3
    52                              <1> %endmacro
    53                              <1> 
    54                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    55                              <1> %macro 	PRINT 1
    56                              <1> 	pusha
    57                              <1> 	pushf
    58                              <1> 	jmp %%astr
    59                              <1> %%str	db	%1     ;, 0
    60                              <1> %%strln	equ	$-%%str
    61                              <1> %%astr:	_syscall_write 1, %%str, %%strln
    62                              <1> 	popf
    63                              <1> 	popa
    64                              <1> %endmacro
    65                              <1> 
    66                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    67                              <1> %macro	PUTCHAR 1
    68                              <1> 	pusha
    69                              <1> 	pushf
    70                              <1> %ifstr %1
    71                              <1> 	mov	al, %1
    72                              <1> %elifnum %1
    73                              <1> 	mov	al, %1
    74                              <1> %elifidni %1,al
    75                              <1> 	nop
    76                              <1> %elifidni %1,ah
    77                              <1> 	mov	al, ah
    78                              <1> %elifidni %1,bl
    79                              <1> 	mov	al, bl
    80                              <1> %elifidni %1,bh
    81                              <1> 	mov	al, bh
    82                              <1> %elifidni %1,cl
    83                              <1> 	mov	al, cl
    84                              <1> %elifidni %1,ch
    85                              <1> 	mov	al, ch
    86                              <1> %elifidni %1,dl
    87                              <1> 	mov	al, dl
    88                              <1> %elifidni %1,dh
    89                              <1> 	mov	al, dh
    90                              <1> %else
    91                              <1> 	mov	al, %1  ; let's hope it is a memory location such as [var]
    92                              <1> %endif
    93                              <1> 	sub	esp, 2  ; reserve memory for buffer
    94                              <1> 	mov	edi, esp
    95                              <1> 	mov	[edi], al
    96                              <1> 	_syscall_write 1, edi, 1
    97                              <1> 	add	esp, 2
    98                              <1> 	popf
    99                              <1> 	popa
   100                              <1> %endmacro
   101                              <1> 
   102                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   103                              <1> %macro	GETCHAR 0
   104                              <1> 	pushf
   105                              <1> 	push	edi
   106                              <1> 	sub	esp, 2
   107                              <1> 	mov	edi, esp
   108                              <1> 	_syscall_read 0, edi, 1
   109                              <1> 	cmp	eax, 1
   110                              <1> 	jne	%%eof_reached
   111                              <1> 	xor	eax,eax
   112                              <1> 	mov	al, [edi]
   113                              <1> 	jmp	%%gcquit
   114                              <1> %%eof_reached:
   115                              <1> 	xor	eax, eax
   116                              <1> 	not	eax 		; eax := -1
   117                              <1> %%gcquit:
   118                              <1> 	add	esp, 2
   119                              <1> 	pop	edi
   120                              <1> 	popf
   121                              <1> %endmacro
   122                              <1> 
   123                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   124                              <1> %macro FINISH 0-1 0
   125                              <1> 	_syscall_exit %1
   126                              <1> %endmacro
   127                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   128                              <1> %macro UNSINT 1
   129                              <1> pusha
   130                              <1> pushf
   131                              <1> push dword %1
   132                              <1> pop eax
   133                              <1> mov edi,eax
   134                              <1> mov esi,10
   135                              <1>   xor ebx,ebx
   136                              <1> %%m1:
   137                              <1>    xor edx,edx
   138                              <1>    div esi
   139                              <1>    inc ebx
   140                              <1>    cmp eax,0
   141                              <1>    jne %%m1
   142                              <1> 
   143                              <1>    mov eax,1
   144                              <1>    mov ecx,ebx
   145                              <1>    dec ecx
   146                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   147                              <1>     cmp ecx,0
   148                              <1>      je %%m4
   149                              <1> %%m2:  mul esi
   150                              <1>        loop %%m2
   151                              <1> 
   152                              <1>        mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:
   155                              <1>       mov eax,edi
   156                              <1>       xor edx,edx
   157                              <1>       div ebx
   158                              <1>       add al,'0'
   159                              <1>       PUTCHAR al
   160                              <1>       mov edi,edx
   161                              <1>       xor edx,edx
   162                              <1>       mov eax,ebx
   163                              <1>       div esi
   164                              <1>       cmp eax,1
   165                              <1>       je %%m4
   166                              <1>       mov ebx,eax
   167                              <1>       jmp %%m3
   168                              <1>  %%m4:
   169                              <1>       mov edx,edi
   170                              <1>       add dl,'0'
   171                              <1>       PUTCHAR dl
   172                              <1> 
   173                              <1> 
   174                              <1> popf
   175                              <1> popa
   176                              <1> %endmacro
   177                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   178                              <1> %macro SIGNINT 1
   179                              <1> pusha
   180                              <1> pushf
   181                              <1> push dword %1
   182                              <1> pop eax
   183                              <1>     cmp eax,0
   184                              <1>     jge %%m5
   185                              <1>     PUTCHAR '-'
   186                              <1>     neg eax
   187                              <1> %%m5:
   188                              <1>       UNSINT eax
   189                              <1> popf
   190                              <1> popa
   191                              <1> %endmacro
   192                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   193                              <1> %macro GETUN 1
   194                              <1> pushad
   195                              <1> pushfd
   196                              <1> ;;;;;;;;;;;;;;;;;;;;;;
   197                              <1> xor edi,edi
   198                              <1> xor esi,esi
   199                              <1> %%m1:
   200                              <1> GETCHAR
   201                              <1> cmp al,0xA
   202                              <1> je %%m2
   203                              <1> cmp al,'0'
   204                              <1> jb %%m_err
   205                              <1> cmp al,'9'
   206                              <1> ja %%m_err
   207                              <1> inc edi
   208                              <1> xor ecx,ecx
   209                              <1> mov cl,al
   210                              <1> mov eax,esi
   211                              <1> mov ebx,10
   212                              <1> mul ebx
   213                              <1> sub cl,48
   214                              <1> add eax,ecx
   215                              <1> jc %%m3
   216                              <1> mov esi,eax
   217                              <1> jmp %%m1
   218                              <1> %%m2:
   219                              <1> cmp edi,0
   220                              <1> je %%m1
   221                              <1> jmp %%m4
   222                              <1> %%m3: PRINT "too big number"
   223                              <1> PUTCHAR 10
   224                              <1> jmp %%m4
   225                              <1> %%m_err: PRINT "ERROR!!!"
   226                              <1> PUTCHAR 0xa
   227                              <1> %%m4:
   228                              <1> ;;;;;;;;;;;;;;;;;;
   229                              <1> push esi
   230                              <1> add esp,4
   231                              <1> popfd
   232                              <1> popad
   233                              <1> sub esp,40
   234                              <1> pop dword %1
   235                              <1> add esp,36
   236                              <1> %endmacro
   237                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   238                              <1> %macro GETSIG 1
   239                              <1> pushad
   240                              <1> pushfd
   241                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   242                              <1> xor edi,edi
   243                              <1> xor esi,esi
   244                              <1> mov ebx,10
   245                              <1> %%m_st1: GETCHAR
   246                              <1> cmp al,0xa
   247                              <1> je %%m_st1
   248                              <1> cmp al,'-'
   249                              <1> jne %%s1
   250                              <1> mov ebx,-10
   251                              <1> push ebx
   252                              <1> GETCHAR
   253                              <1> cmp al,0xa
   254                              <1> je %%m_err
   255                              <1> jmp %%m_st21
   256                              <1> %%s1: push ebx
   257                              <1> cmp al,'+'
   258                              <1> jne %%m_st21
   259                              <1> GETCHAR
   260                              <1> cmp al,0xa
   261                              <1> je %%m_err
   262                              <1> jmp %%m_st21
   263                              <1> %%m_st2: GETCHAR
   264                              <1> %%m_st21:  cmp al,0xa
   265                              <1> je %%pr_end
   266                              <1> cmp al,'0'
   267                              <1> jb %%m_err
   268                              <1> cmp al,'9'
   269                              <1> ja %%m_err
   270                              <1> inc edi
   271                              <1> xor ecx,ecx
   272                              <1> mov cl,al
   273                              <1> mov eax,esi
   274                              <1> imul ebx
   275                              <1> sub cl,48
   276                              <1> cmp dword[esp],-10
   277                              <1> je %%j_s
   278                              <1> add eax,ecx
   279                              <1> jmp %%j_per
   280                              <1> %%j_s: sub eax,ecx
   281                              <1> %%j_per: jo %%m_b
   282                              <1> mov esi,eax
   283                              <1> cmp dword[esp],-10
   284                              <1> jne %%m_st2
   285                              <1> neg esi
   286                              <1> jmp %%m_st2
   287                              <1> %%pr_end:  cmp edi,0
   288                              <1> je %%m_st2
   289                              <1> jmp %%m_k
   290                              <1> ;;;;;;;;;
   291                              <1> %%m_err: pop ebx
   292                              <1> PRINT "ERROR"
   293                              <1> PUTCHAR 0xa
   294                              <1> jmp %%m_end
   295                              <1> %%m_b: pop ebx
   296                              <1> cmp ebx,-10
   297                              <1> je  %%m_l
   298                              <1> PRINT "too big"
   299                              <1> PUTCHAR 0xa
   300                              <1> jmp %%m_end
   301                              <1> %%m_l: PRINT "too less"
   302                              <1> PUTCHAR 0xa
   303                              <1> jmp %%m_end
   304                              <1> %%m_k: pop ebx
   305                              <1> cmp ebx,-10
   306                              <1> jne %%m_p
   307                              <1> neg esi
   308                              <1> %%m_p:
   309                              <1> 
   310                              <1> ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
   311                              <1> 
   312                              <1> push esi
   313                              <1> add esp,4
   314                              <1> popfd
   315                              <1> popad
   316                              <1> sub esp,40
   317                              <1> pop dword %1
   318                              <1> add esp,36
   319                              <1> jmp %%mm_e
   320                              <1> %%m_end:
   321                              <1> popfd
   322                              <1> popad
   323                              <1> %%mm_e:
   324                              <1> %endmacro
     2                                  
     3                                  ; 4.	Дан фрагмент программы на С
     4                                  ;             //b
     5                                  ;              unsigned int x;
     6                                  ; x++;
     7                                  ; написать программу на ассемблере, использовать только регистры размером 1 байт или ячейку размером один байт
     8                                  ;
     9                                  ; Проверить для значений
    10                                  ; //b - x=4 294 967 293
    11                                  
    12                                  
    13                                  section .bss
    14 00000000 ????????                    x resd 1
    15                                  
    16                                  section .text
    17                                      global _start
    18                                  
    19                                  _start:
    20 00000000 C705[00000000]FDFF-         mov dword [x], 4294967293
    20 00000008 FFFF               
    21                                      PRINT "x = "
    56 0000000A 60                  <1>  pusha
    57 0000000B 9C                  <1>  pushf
    58 0000000C EB04                <1>  jmp %%astr
    59 0000000E 78203D20            <1> %%str db %1
    60                              <1> %%strln equ $-%%str
    61                              <1> %%astr: _syscall_write 1, %%str, %%strln
    61                              <2> ..@3.astr: 
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 00000012 52                  <3>  push edx
    16 00000013 51                  <3>  push ecx
    17 00000014 53                  <3>  push ebx
    18 00000015 6A04                <3>  push %1
    19 00000017 6A01                <3>  push %2
    20 00000019 68[0E000000]        <3>  push %3
    21 0000001E 6A04                <3>  push %4
    22 00000020 5A                  <3>  pop edx
    23 00000021 59                  <3>  pop ecx
    24 00000022 5B                  <3>  pop ebx
    25 00000023 58                  <3>  pop eax
    26 00000024 CD80                <3>  int 0x80
    27 00000026 5B                  <3>  pop ebx
    28 00000027 59                  <3>  pop ecx
    29 00000028 5A                  <3>  pop edx
    62 00000029 9D                  <1>  popf
    63 0000002A 61                  <1>  popa
    22                                      UNSINT dword [x]
   129 0000002B 60                  <1> pusha
   130 0000002C 9C                  <1> pushf
   131 0000002D FF35[00000000]      <1> push dword %1
   132 00000033 58                  <1> pop eax
   133 00000034 89C7                <1> mov edi,eax
   134 00000036 BE0A000000          <1> mov esi,10
   135 0000003B 31DB                <1>  xor ebx,ebx
   136                              <1> %%m1:
   137 0000003D 31D2                <1>  xor edx,edx
   138 0000003F F7F6                <1>  div esi
   139 00000041 43                  <1>  inc ebx
   140 00000042 83F800              <1>  cmp eax,0
   141 00000045 75F6                <1>  jne %%m1
   142                              <1> 
   143 00000047 B801000000          <1>  mov eax,1
   144 0000004C 89D9                <1>  mov ecx,ebx
   145 0000004E 49                  <1>  dec ecx
   146                              <1> 
   147 0000004F 83F900              <1>  cmp ecx,0
   148 00000052 7441                <1>  je %%m4
   149 00000054 F7E6                <1> %%m2: mul esi
   150 00000056 E2FC                <1>  loop %%m2
   151                              <1> 
   152 00000058 89C3                <1>  mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:
   155 0000005A 89F8                <1>  mov eax,edi
   156 0000005C 31D2                <1>  xor edx,edx
   157 0000005E F7F3                <1>  div ebx
   158 00000060 0430                <1>  add al,'0'
   159                              <1>  PUTCHAR al
    68 00000062 60                  <2>  pusha
    69 00000063 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71                              <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75 00000064 90                  <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87                              <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 00000065 83EC02              <2>  sub esp, 2
    94 00000068 89E7                <2>  mov edi, esp
    95 0000006A 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 0000006C 52                  <4>  push edx
    16 0000006D 51                  <4>  push ecx
    17 0000006E 53                  <4>  push ebx
    18 0000006F 6A04                <4>  push %1
    19 00000071 6A01                <4>  push %2
    20 00000073 57                  <4>  push %3
    21 00000074 6A01                <4>  push %4
    22 00000076 5A                  <4>  pop edx
    23 00000077 59                  <4>  pop ecx
    24 00000078 5B                  <4>  pop ebx
    25 00000079 58                  <4>  pop eax
    26 0000007A CD80                <4>  int 0x80
    27 0000007C 5B                  <4>  pop ebx
    28 0000007D 59                  <4>  pop ecx
    29 0000007E 5A                  <4>  pop edx
    97 0000007F 83C402              <2>  add esp, 2
    98 00000082 9D                  <2>  popf
    99 00000083 61                  <2>  popa
   160 00000084 89D7                <1>  mov edi,edx
   161 00000086 31D2                <1>  xor edx,edx
   162 00000088 89D8                <1>  mov eax,ebx
   163 0000008A F7F6                <1>  div esi
   164 0000008C 83F801              <1>  cmp eax,1
   165 0000008F 7404                <1>  je %%m4
   166 00000091 89C3                <1>  mov ebx,eax
   167 00000093 EBC5                <1>  jmp %%m3
   168                              <1>  %%m4:
   169 00000095 89FA                <1>  mov edx,edi
   170 00000097 80C230              <1>  add dl,'0'
   171                              <1>  PUTCHAR dl
    68 0000009A 60                  <2>  pusha
    69 0000009B 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71                              <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75                              <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87 0000009C 88D0                <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 0000009E 83EC02              <2>  sub esp, 2
    94 000000A1 89E7                <2>  mov edi, esp
    95 000000A3 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 000000A5 52                  <4>  push edx
    16 000000A6 51                  <4>  push ecx
    17 000000A7 53                  <4>  push ebx
    18 000000A8 6A04                <4>  push %1
    19 000000AA 6A01                <4>  push %2
    20 000000AC 57                  <4>  push %3
    21 000000AD 6A01                <4>  push %4
    22 000000AF 5A                  <4>  pop edx
    23 000000B0 59                  <4>  pop ecx
    24 000000B1 5B                  <4>  pop ebx
    25 000000B2 58                  <4>  pop eax
    26 000000B3 CD80                <4>  int 0x80
    27 000000B5 5B                  <4>  pop ebx
    28 000000B6 59                  <4>  pop ecx
    29 000000B7 5A                  <4>  pop edx
    97 000000B8 83C402              <2>  add esp, 2
    98 000000BB 9D                  <2>  popf
    99 000000BC 61                  <2>  popa
   172                              <1> 
   173                              <1> 
   174 000000BD 9D                  <1> popf
   175 000000BE 61                  <1> popa
    23                                      PUTCHAR 10
    68 000000BF 60                  <1>  pusha
    69 000000C0 9C                  <1>  pushf
    70                              <1> %ifstr %1
    71                              <1>  mov al, %1
    72                              <1> %elifnum %1
    73 000000C1 B00A                <1>  mov al, %1
    74                              <1> %elifidni %1,al
    75                              <1>  nop
    76                              <1> %elifidni %1,ah
    77                              <1>  mov al, ah
    78                              <1> %elifidni %1,bl
    79                              <1>  mov al, bl
    80                              <1> %elifidni %1,bh
    81                              <1>  mov al, bh
    82                              <1> %elifidni %1,cl
    83                              <1>  mov al, cl
    84                              <1> %elifidni %1,ch
    85                              <1>  mov al, ch
    86                              <1> %elifidni %1,dl
    87                              <1>  mov al, dl
    88                              <1> %elifidni %1,dh
    89                              <1>  mov al, dh
    90                              <1> %else
    91                              <1>  mov al, %1
    92                              <1> %endif
    93 000000C3 83EC02              <1>  sub esp, 2
    94 000000C6 89E7                <1>  mov edi, esp
    95 000000C8 8807                <1>  mov [edi], al
    96                              <1>  _syscall_write 1, edi, 1
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 000000CA 52                  <3>  push edx
    16 000000CB 51                  <3>  push ecx
    17 000000CC 53                  <3>  push ebx
    18 000000CD 6A04                <3>  push %1
    19 000000CF 6A01                <3>  push %2
    20 000000D1 57                  <3>  push %3
    21 000000D2 6A01                <3>  push %4
    22 000000D4 5A                  <3>  pop edx
    23 000000D5 59                  <3>  pop ecx
    24 000000D6 5B                  <3>  pop ebx
    25 000000D7 58                  <3>  pop eax
    26 000000D8 CD80                <3>  int 0x80
    27 000000DA 5B                  <3>  pop ebx
    28 000000DB 59                  <3>  pop ecx
    29 000000DC 5A                  <3>  pop edx
    97 000000DD 83C402              <1>  add esp, 2
    98 000000E0 9D                  <1>  popf
    99 000000E1 61                  <1>  popa
    24                                  
    25 000000E2 FF05[00000000]              inc dword [x]
    26                                      PRINT "x после инкремента = "
    56 000000E8 60                  <1>  pusha
    57 000000E9 9C                  <1>  pushf
    58 000000EA EB24                <1>  jmp %%astr
    59 000000EC 7820D0BFD0BED181D0- <1> %%str db %1
    59 000000F5 BBD0B520D0B8D0BDD0- <1>
    59 000000FE BAD180D0B5D0BCD0B5- <1>
    59 00000107 D0BDD182D0B0203D20  <1>
    60                              <1> %%strln equ $-%%str
    61                              <1> %%astr: _syscall_write 1, %%str, %%strln
    61                              <2> ..@16.astr: 
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 00000110 52                  <3>  push edx
    16 00000111 51                  <3>  push ecx
    17 00000112 53                  <3>  push ebx
    18 00000113 6A04                <3>  push %1
    19 00000115 6A01                <3>  push %2
    20 00000117 68[EC000000]        <3>  push %3
    21 0000011C 6A24                <3>  push %4
    22 0000011E 5A                  <3>  pop edx
    23 0000011F 59                  <3>  pop ecx
    24 00000120 5B                  <3>  pop ebx
    25 00000121 58                  <3>  pop eax
    26 00000122 CD80                <3>  int 0x80
    27 00000124 5B                  <3>  pop ebx
    28 00000125 59                  <3>  pop ecx
    29 00000126 5A                  <3>  pop edx
    62 00000127 9D                  <1>  popf
    63 00000128 61                  <1>  popa
    27                                      UNSINT dword [x]
   129 00000129 60                  <1> pusha
   130 0000012A 9C                  <1> pushf
   131 0000012B FF35[00000000]      <1> push dword %1
   132 00000131 58                  <1> pop eax
   133 00000132 89C7                <1> mov edi,eax
   134 00000134 BE0A000000          <1> mov esi,10
   135 00000139 31DB                <1>  xor ebx,ebx
   136                              <1> %%m1:
   137 0000013B 31D2                <1>  xor edx,edx
   138 0000013D F7F6                <1>  div esi
   139 0000013F 43                  <1>  inc ebx
   140 00000140 83F800              <1>  cmp eax,0
   141 00000143 75F6                <1>  jne %%m1
   142                              <1> 
   143 00000145 B801000000          <1>  mov eax,1
   144 0000014A 89D9                <1>  mov ecx,ebx
   145 0000014C 49                  <1>  dec ecx
   146                              <1> 
   147 0000014D 83F900              <1>  cmp ecx,0
   148 00000150 7441                <1>  je %%m4
   149 00000152 F7E6                <1> %%m2: mul esi
   150 00000154 E2FC                <1>  loop %%m2
   151                              <1> 
   152 00000156 89C3                <1>  mov ebx,eax
   153                              <1> 
   154                              <1> %%m3:
   155 00000158 89F8                <1>  mov eax,edi
   156 0000015A 31D2                <1>  xor edx,edx
   157 0000015C F7F3                <1>  div ebx
   158 0000015E 0430                <1>  add al,'0'
   159                              <1>  PUTCHAR al
    68 00000160 60                  <2>  pusha
    69 00000161 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71                              <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75 00000162 90                  <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87                              <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 00000163 83EC02              <2>  sub esp, 2
    94 00000166 89E7                <2>  mov edi, esp
    95 00000168 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 0000016A 52                  <4>  push edx
    16 0000016B 51                  <4>  push ecx
    17 0000016C 53                  <4>  push ebx
    18 0000016D 6A04                <4>  push %1
    19 0000016F 6A01                <4>  push %2
    20 00000171 57                  <4>  push %3
    21 00000172 6A01                <4>  push %4
    22 00000174 5A                  <4>  pop edx
    23 00000175 59                  <4>  pop ecx
    24 00000176 5B                  <4>  pop ebx
    25 00000177 58                  <4>  pop eax
    26 00000178 CD80                <4>  int 0x80
    27 0000017A 5B                  <4>  pop ebx
    28 0000017B 59                  <4>  pop ecx
    29 0000017C 5A                  <4>  pop edx
    97 0000017D 83C402              <2>  add esp, 2
    98 00000180 9D                  <2>  popf
    99 00000181 61                  <2>  popa
   160 00000182 89D7                <1>  mov edi,edx
   161 00000184 31D2                <1>  xor edx,edx
   162 00000186 89D8                <1>  mov eax,ebx
   163 00000188 F7F6                <1>  div esi
   164 0000018A 83F801              <1>  cmp eax,1
   165 0000018D 7404                <1>  je %%m4
   166 0000018F 89C3                <1>  mov ebx,eax
   167 00000191 EBC5                <1>  jmp %%m3
   168                              <1>  %%m4:
   169 00000193 89FA                <1>  mov edx,edi
   170 00000195 80C230              <1>  add dl,'0'
   171                              <1>  PUTCHAR dl
    68 00000198 60                  <2>  pusha
    69 00000199 9C                  <2>  pushf
    70                              <2> %ifstr %1
    71                              <2>  mov al, %1
    72                              <2> %elifnum %1
    73                              <2>  mov al, %1
    74                              <2> %elifidni %1,al
    75                              <2>  nop
    76                              <2> %elifidni %1,ah
    77                              <2>  mov al, ah
    78                              <2> %elifidni %1,bl
    79                              <2>  mov al, bl
    80                              <2> %elifidni %1,bh
    81                              <2>  mov al, bh
    82                              <2> %elifidni %1,cl
    83                              <2>  mov al, cl
    84                              <2> %elifidni %1,ch
    85                              <2>  mov al, ch
    86                              <2> %elifidni %1,dl
    87 0000019A 88D0                <2>  mov al, dl
    88                              <2> %elifidni %1,dh
    89                              <2>  mov al, dh
    90                              <2> %else
    91                              <2>  mov al, %1
    92                              <2> %endif
    93 0000019C 83EC02              <2>  sub esp, 2
    94 0000019F 89E7                <2>  mov edi, esp
    95 000001A1 8807                <2>  mov [edi], al
    96                              <2>  _syscall_write 1, edi, 1
    51                              <3>  _syscall_3 4,%1,%2,%3
    15 000001A3 52                  <4>  push edx
    16 000001A4 51                  <4>  push ecx
    17 000001A5 53                  <4>  push ebx
    18 000001A6 6A04                <4>  push %1
    19 000001A8 6A01                <4>  push %2
    20 000001AA 57                  <4>  push %3
    21 000001AB 6A01                <4>  push %4
    22 000001AD 5A                  <4>  pop edx
    23 000001AE 59                  <4>  pop ecx
    24 000001AF 5B                  <4>  pop ebx
    25 000001B0 58                  <4>  pop eax
    26 000001B1 CD80                <4>  int 0x80
    27 000001B3 5B                  <4>  pop ebx
    28 000001B4 59                  <4>  pop ecx
    29 000001B5 5A                  <4>  pop edx
    97 000001B6 83C402              <2>  add esp, 2
    98 000001B9 9D                  <2>  popf
    99 000001BA 61                  <2>  popa
   172                              <1> 
   173                              <1> 
   174 000001BB 9D                  <1> popf
   175 000001BC 61                  <1> popa
    28                                      PUTCHAR 10
    68 000001BD 60                  <1>  pusha
    69 000001BE 9C                  <1>  pushf
    70                              <1> %ifstr %1
    71                              <1>  mov al, %1
    72                              <1> %elifnum %1
    73 000001BF B00A                <1>  mov al, %1
    74                              <1> %elifidni %1,al
    75                              <1>  nop
    76                              <1> %elifidni %1,ah
    77                              <1>  mov al, ah
    78                              <1> %elifidni %1,bl
    79                              <1>  mov al, bl
    80                              <1> %elifidni %1,bh
    81                              <1>  mov al, bh
    82                              <1> %elifidni %1,cl
    83                              <1>  mov al, cl
    84                              <1> %elifidni %1,ch
    85                              <1>  mov al, ch
    86                              <1> %elifidni %1,dl
    87                              <1>  mov al, dl
    88                              <1> %elifidni %1,dh
    89                              <1>  mov al, dh
    90                              <1> %else
    91                              <1>  mov al, %1
    92                              <1> %endif
    93 000001C1 83EC02              <1>  sub esp, 2
    94 000001C4 89E7                <1>  mov edi, esp
    95 000001C6 8807                <1>  mov [edi], al
    96                              <1>  _syscall_write 1, edi, 1
    51                              <2>  _syscall_3 4,%1,%2,%3
    15 000001C8 52                  <3>  push edx
    16 000001C9 51                  <3>  push ecx
    17 000001CA 53                  <3>  push ebx
    18 000001CB 6A04                <3>  push %1
    19 000001CD 6A01                <3>  push %2
    20 000001CF 57                  <3>  push %3
    21 000001D0 6A01                <3>  push %4
    22 000001D2 5A                  <3>  pop edx
    23 000001D3 59                  <3>  pop ecx
    24 000001D4 5B                  <3>  pop ebx
    25 000001D5 58                  <3>  pop eax
    26 000001D6 CD80                <3>  int 0x80
    27 000001D8 5B                  <3>  pop ebx
    28 000001D9 59                  <3>  pop ecx
    29 000001DA 5A                  <3>  pop edx
    97 000001DB 83C402              <1>  add esp, 2
    98 000001DE 9D                  <1>  popf
    99 000001DF 61                  <1>  popa
    29                                  
    30                                      FINISH
   125                              <1>  _syscall_exit %1
    34 000001E0 BB00000000          <2>  mov ebx, %1
    35 000001E5 B801000000          <2>  mov eax, 1
    36 000001EA CD80                <2>  int 0x80
